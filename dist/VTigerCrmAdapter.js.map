{"version":3,"sources":["../src/VTigerCrmAdapter.js"],"names":[],"mappings":"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","file":"VTigerCrmAdapter.js","sourcesContent":["/**\r\n * Created by OliverJaegle on 08.06.2016.\r\n */\r\nconst VTigerCrm = require('./vtiger_consumer_swagger/src/'); // See note below*.\r\nconst CryptoJS = require('crypto-js');\r\n\r\nconst ELEMENT_TYPE_CONTACT = 'Contacts';\r\n\r\nexport class VTigerCrmAdapterException extends Error {\r\n    constructor(operation, message, previous) {\r\n        super(message);\r\n        this.operation = operation;\r\n        this.previous = previous;\r\n    }\r\n}\r\n\r\nexport class VTigerCrmAdapter {\r\n\r\n// ------------------------------------------------ public methods ----------------------------------------------------\r\n    constructor(basePath, username, accesskey, assigned_user_id, logger = console) {\r\n\r\n        this.username = username;\r\n        this.accesskey = accesskey;\r\n        this.sessionToken = '';\r\n        this.assigned_user_id = assigned_user_id;\r\n        this.logger = logger;\r\n\r\n        this.vTigerApi = new VTigerCrm.DefaultApi(); // Allocate the API class we're going to use.\r\n        this.vTigerApi.apiClient.basePath = basePath;\r\n\r\n        /*          We can't login in the constructor as a consumer might immediately issue a subsequent request.\r\n         Thus, all the resolvers of the login-Promise need to buffer the result in order to take advantage of existing\r\n         session tokens\r\n\r\n         this._loginPromise(this.username, this.accessKey)\r\n         .then((result)=>{\r\n         this.sessionToken = result\r\n         })\r\n         .catch((err)=>{\r\n         console.error(err.operation, err.message, err.previous.toString());\r\n         throw err;\r\n         });*/\r\n    }\r\n\r\n    findContactsFulltextPromise(text, limit) {\r\n        const contactSkeleton = {\r\n            lastname: text,\r\n            firstname: text,\r\n            email: text\r\n        };\r\n\r\n        return this.findContactsBySkeletonPromise(contactSkeleton, 'OR', limit);\r\n    } //findContactsFulltextPromise\r\n\r\n    createContactPromise(contact) {\r\n        const adapterInstance = this;\r\n        contact.assigned_user_id = this.assigned_user_id;\r\n        return adapterInstance._loginPromise().then((sessionToken)=>adapterInstance._createPromise(sessionToken, ELEMENT_TYPE_CONTACT, contact));\r\n    }\r\n\r\n    createContactWithMessagePromise(contact, message) {\r\n        const adapterInstance = this;\r\n        contact.assigned_user_id = this.assigned_user_id;\r\n        return adapterInstance._loginPromise().then((sessionToken)=>adapterInstance._createContactWithMessagePromise(sessionToken, contact, message));\r\n    }\r\n\r\n    retrievePromise(id) {\r\n        const adapterInstance = this;\r\n        return adapterInstance._loginPromise().then((sessionToken)=>adapterInstance._retrievePromise(sessionToken, id));\r\n    }\r\n\r\n    updatePromise(element) {\r\n        const adapterInstance = this;\r\n        return adapterInstance._loginPromise().then((sessionToken)=>adapterInstance._updatePromise(sessionToken, element));\r\n    }\r\n\r\n    deletePromise(id) {\r\n        const adapterInstance = this;\r\n        return adapterInstance._loginPromise().then((sessionToken)=>adapterInstance._deletePromise(sessionToken, id));\r\n    }\r\n\r\n//-------------------------------------------------- private methods ---------------------------------------------------\r\n    /**\r\n     * All services offered by vTiger require authorization to be done prior to the webservice-call.\r\n     * As everything is done asynchronously, the login-promise needs to be resolved before continuing resolving the\r\n     * actual webservice-promise. Thus, the autorization-rensitive-methods (starting with _) are encapsulated again in a\r\n     * public method which chains the execution.\r\n     * Still, the login-method bufferss the result on resolution so that - although the promise is chained as pre-\r\n     * decessor, the webservices used for authorization are not executed anymore.\r\n     * It seems as if the sessionToken had an unlimited lifetime.\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _loginPromise() {\r\n        const adapterInstance = this;\r\n        return new Promise((resolve, reject)=> {\r\n            if (adapterInstance.sessionToken) {\r\n                resolve(adapterInstance.sessionToken)\r\n            }\r\n            else {\r\n                adapterInstance.vTigerApi.operationgetchallengeGet(adapterInstance.username, (err, data, response)=> {\r\n                    if (err) {\r\n                        return reject(new VTigerCrmAdapterException('GET_CHALLENGE', \"Couldn't execute webservice:\", err));\r\n                    }\r\n                    if (!response.body.success) {\r\n                        return reject(new VTigerCrmAdapterException('GET_CHALLENGE', \"Couldn't receive challenge - possibly wrong server configuration\"));\r\n                    }\r\n\r\n                    const challengeToken = response.body.result.token;\r\n\r\n                    adapterInstance.vTigerApi.operationloginPost(adapterInstance.username, CryptoJS.MD5(challengeToken + adapterInstance.accesskey).toString(), (err, data, response)=> {\r\n                        if (err) {\r\n                            return reject(new VTigerCrmAdapterException('LOGIN', \"Couldn't execute webservice:\", err));\r\n                        }\r\n\r\n                        if (!response.body.success) {\r\n                            return reject(new VTigerCrmAdapterException('LOGIN', \"Couldn't log in:\", JSON.stringify(response)));\r\n                        }\r\n\r\n                        adapterInstance.sessionToken = response.body.result.sessionName;\r\n                        resolve(response.body.result.sessionName);\r\n\r\n                    }); //operationLoginPost\r\n                }); //operationChallengeGet\r\n            }\r\n        })\r\n    }//_loginPromise\r\n\r\n    /**\r\n     * Promises a query result\r\n     *\r\n     * @param sessionToken\r\n     * @param queryString\r\n     * @returns {Promise}\r\n     * @private\r\n     */\r\n    _queryPromise(sessionToken, queryString) {\r\n\r\n        const adapterInstance = this;\r\n\r\n        return new Promise((resolve, reject)=> {\r\n            if (!sessionToken) reject(new VTigerCrmAdapterException('QUERY', 'No session token for query'));\r\n            adapterInstance.vTigerApi.operationqueryGet(sessionToken, queryString, (err, data, response)=> {\r\n                if (err) {\r\n                    return reject(new VTigerCrmAdapterException('QUERY', \"Couldn't execute webservice:\", err));\r\n                }\r\n\r\n                if (!response.body.success) {\r\n                    return reject(new VTigerCrmAdapterException('QUERY', \"Couldn't execute query:\", JSON.stringify(response)));\r\n                }\r\n\r\n                resolve(response.body.result); //might be initial\r\n            })\r\n        })\r\n    }\r\n\r\n    _createPromise(sessionToken, objectType, object) {\r\n        const adapterInstance = this;\r\n        return new Promise((resolve, reject)=> {\r\n            if (!sessionToken) return reject(new VTigerCrmAdapterException('CREATE', 'No session token for creation'));\r\n            adapterInstance.vTigerApi.operationcreatePost(sessionToken, objectType, JSON.stringify(object), (err, data, response)=> {\r\n                if (err) {\r\n                    return reject(new VTigerCrmAdapterException('CREATE', \"Couldn't execute webservice:\", err));\r\n                }\r\n\r\n                if (!response.body.success) {\r\n                    return reject(new VTigerCrmAdapterException('CREATE', \"Couldn't create:\", JSON.stringify(response)));\r\n                }\r\n\r\n                resolve(response.body.result); //might be initial\r\n            })\r\n        })\r\n    } //_createPromise\r\n\r\n    _createContactWithMessagePromise(sessionToken, contact, message) {\r\n        const adapterInstance = this;\r\n        return new Promise((resolve, reject)=> {\r\n            if (!sessionToken) return reject(new VTigerCrmAdapterException('CREATE', 'No session token for creation'));\r\n            adapterInstance.vTigerApi.operationcreateContactPost(sessionToken, JSON.stringify(contact), message, (err, data, response)=> {\r\n                if (err) {\r\n                    return reject(new VTigerCrmAdapterException('CREATE CONTACT WITH MESSAGE', \"Couldn't execute webservice:\", err));\r\n                }\r\n\r\n                if (!response.body.success) {\r\n                    return reject(new VTigerCrmAdapterException('CREATE CONTACT WITH MESSAGE', \"Couldn't create:\", response.body.error.message));\r\n                }\r\n\r\n                resolve({\r\n                    createdContact: JSON.parse(response.body.result.contact),\r\n                    messages: response.body.result.messages\r\n                }); //might be initial\r\n            })\r\n        })\r\n    } //_createPromise\r\n\r\n    _retrievePromise(sessionToken, id) {\r\n        const adapterInstance = this;\r\n        return new Promise((resolve, reject)=> {\r\n            if (!sessionToken) return reject(new VTigerCrmAdapterException('RETRIEVE', 'No session token for retrieval'));\r\n            adapterInstance.vTigerApi.operationretrieveGet(sessionToken, id, (err, data, response)=> {\r\n                if (err) {\r\n                    return reject(new VTigerCrmAdapterException('RETRIEVE', \"Couldn't execute webservice:\", err));\r\n                }\r\n\r\n                if (!response.body.success) {\r\n                    return reject(new VTigerCrmAdapterException('RETRIEVE', \"Couldn't retrieve:\", JSON.stringify(response)));\r\n                }\r\n\r\n                resolve(response.body.result); //might be initial\r\n            })\r\n        })\r\n    } //_retrievePromise\r\n\r\n    _updatePromise(sessionToken, object) {\r\n        const adapterInstance = this;\r\n        return new Promise((resolve, reject)=> {\r\n            if (!sessionToken) return reject(new VTigerCrmAdapterException('UPDATE', 'No session token for update'));\r\n            adapterInstance.vTigerApi.operationupdatePost(sessionToken, JSON.stringify(object), (err, data, response)=> {\r\n                if (err) {\r\n                    return reject(new VTigerCrmAdapterException('UPDATE', \"Couldn't execute webservice:\", err));\r\n                }\r\n\r\n                if (!response.body.success) {\r\n                    return reject(new VTigerCrmAdapterException('UPDATE', \"Couldn't update:\", JSON.stringify(response)));\r\n                }\r\n\r\n                resolve(response.body.result); //might be initial\r\n            })\r\n        })\r\n    } //_updatePromise\r\n\r\n    _deletePromise(sessionToken, id) {\r\n        const adapterInstance = this;\r\n        return new Promise((resolve, reject)=> {\r\n            if (!sessionToken) return reject(new VTigerCrmAdapterException('DELETE', 'No session token for delete'));\r\n            adapterInstance.vTigerApi.operationdeletePost(sessionToken, id, (err, data, response)=> {\r\n                if (err) {\r\n                    return reject(new VTigerCrmAdapterException('DELETE', \"Couldn't execute webservice:\", err));\r\n                }\r\n\r\n                if (!response.body.success) {\r\n                    return reject(new VTigerCrmAdapterException('DELETE', \"Couldn't delete:\", JSON.stringify(response)));\r\n                }\r\n\r\n                resolve(response.body.success); //might be initial\r\n            })\r\n        })\r\n    } //_deletePromise\r\n\r\n\r\n    findContactsBySkeletonPromise(contactSkeleton, operator = 'AND', limit = 100) {\r\n        /**\r\n         * Operator defines how the properties of the contact skeleton are to be combined.\r\n         * Possible values ['AND', 'OR']\r\n         */\r\n        const adapterInstance = this;\r\n        const queryString = \"select * from Contacts where \" + VTigerCrmAdapter.contactSkeletonToWhere(contactSkeleton, operator) + \" LIMIT \" + limit + \";\";\r\n\r\n        return adapterInstance._loginPromise()\r\n            .then((sessionToken)=>adapterInstance._queryPromise(sessionToken, queryString)\r\n                .catch((err)=> {\r\n                    console.error(new VTigerCrmAdapterException('QUERY', \"Couldn't query:\", err))\r\n                }))\r\n            .catch((err)=> {\r\n                console.error(new VTigerCrmAdapterException('LOGIN', \"Couldn't log in:\", err));\r\n            })\r\n    }; //findContactsBySkeletonPromise\r\n\r\n// ------------------------------------------------- static helpers ----------------------------------------------------\r\n        static\r\n        contactSkeletonToWhere(contact, operator)\r\n        {\r\n            let whereClause = '';\r\n            for (let key in contact) {\r\n                if (contact.hasOwnProperty(key)) {\r\n                    if (whereClause) whereClause += ' ' + operator + ' ';\r\n                    whereClause += key + \" LIKE '\" + contact[key] + \"'\";\r\n                }\r\n            }\r\n            return whereClause;\r\n        }\r\n    }\r\n"]}