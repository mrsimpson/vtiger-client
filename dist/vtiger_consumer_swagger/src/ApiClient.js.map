{"version":3,"sources":["../../../src/vtiger_consumer_swagger/src/ApiClient.js"],"names":[],"mappings":"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","file":"ApiClient.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['superagent'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('superagent'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.CompactCrmDbDialog) {\n      root.CompactCrmDbDialog = {};\n    }\n    root.CompactCrmDbDialog.ApiClient = factory(root.superagent);\n  }\n}(this, function(superagent) {\n  'use strict';\n\n  /**\n   * @module ApiClient\n   * @version 0.1.1\n   */\n\n  /**\n   * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n   * application to use this class directly - the *Api and model classes provide the public API for the service. The\n   * contents of this file should be regarded as internal but are documented for completeness.\n   * @alias module:ApiClient\n   * @class\n   */\n  var exports = function() {\n    /**\n     * The base URL against which to resolve every API call's (relative) path.\n     * @type {String}\n     * @default http://localhost/vtigercrm_dbd/webservice.php\n     */\n    this.basePath = 'http://localhost/vtigercrm_dbd/webservice.php'.replace(/\\/+$/, '');\n\n    /**\n     * The authentication methods to be included for all API calls.\n     * @type {Array.<String>}\n     */\n    this.authentications = {\n    };\n    /**\n     * The default HTTP headers to be included for all API calls.\n     * @type {Array.<String>}\n     * @default {}\n     */\n    this.defaultHeaders = {};\n\n    /**\n     * The default HTTP timeout for all API calls.\n     * @type {Number}\n     * @default 60000\n     */\n    this.timeout = 60000;\n  };\n\n  /**\n   * Returns a string representation for an actual parameter.\n   * @param param The actual parameter.\n   * @returns {String} The string representation of <code>param</code>.\n   */\n  exports.prototype.paramToString = function(param) {\n    if (param == undefined || param == null) {\n      return '';\n    }\n    if (param instanceof Date) {\n      return param.toJSON();\n    }\n    return param.toString();\n  };\n\n  /**\n   * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n   * NOTE: query parameters are not handled here.\n   * @param {String} path The path to append to the base URL.\n   * @param {Object} pathParams The parameter values to append.\n   * @returns {String} The encoded path with parameter values substituted.\n   */\n  exports.prototype.buildUrl = function(path, pathParams) {\n    if (!path.match(/^\\//)) {\n      path = '/' + path;\n    }\n    var url = this.basePath + path;\n    var _this = this;\n    url = url.replace(/\\{([\\w-]+)\\}/g, function(fullMatch, key) {\n      var value;\n      if (pathParams.hasOwnProperty(key)) {\n        value = _this.paramToString(pathParams[key]);\n      } else {\n        value = fullMatch;\n      }\n      return encodeURIComponent(value);\n    });\n    return url;\n  };\n\n  /**\n   * Checks whether the given content type represents JSON.<br>\n   * JSON content type examples:<br>\n   * <ul>\n   * <li>application/json</li>\n   * <li>application/json; charset=UTF8</li>\n   * <li>APPLICATION/JSON</li>\n   * </ul>\n   * @param {String} contentType The MIME content type to check.\n   * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n   */\n  exports.prototype.isJsonMime = function(contentType) {\n    return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n  };\n\n  /**\n   * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n   * @param {Array.<String>} contentTypes\n   * @returns {String} The chosen content type, preferring JSON.\n   */\n  exports.prototype.jsonPreferredMime = function(contentTypes) {\n    for (var i = 0; i < contentTypes.length; i++) {\n      if (this.isJsonMime(contentTypes[i])) {\n        return contentTypes[i];\n      }\n    }\n    return contentTypes[0];\n  };\n\n  /**\n   * Checks whether the given parameter value represents file-like content.\n   * @param param The parameter to check.\n   * @returns {Boolean} <code>true</code> if <code>param</code> represents a file. \n   */\n  exports.prototype.isFileParam = function(param) {\n    // fs.ReadStream in Node.js (but not in runtime like browserify)\n    if (typeof window === 'undefined' &&\n        typeof require === 'function' &&\n        require('fs') &&\n        param instanceof require('fs').ReadStream) {\n      return true;\n    }\n    // Buffer in Node.js\n    if (typeof Buffer === 'function' && param instanceof Buffer) {\n      return true;\n    }\n    // Blob in browser\n    if (typeof Blob === 'function' && param instanceof Blob) {\n      return true;\n    }\n    // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n    if (typeof File === 'function' && param instanceof File) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Normalizes parameter values:\n   * <ul>\n   * <li>remove nils</li>\n   * <li>keep files and arrays</li>\n   * <li>format to string with `paramToString` for other cases</li>\n   * </ul>\n   * @param {Object.<String, Object>} params The parameters as object properties.\n   * @returns {Object.<String, Object>} normalized parameters.\n   */\n  exports.prototype.normalizeParams = function(params) {\n    var newParams = {};\n    for (var key in params) {\n      if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n        var value = params[key];\n        if (this.isFileParam(value) || Array.isArray(value)) {\n          newParams[key] = value;\n        } else {\n          newParams[key] = this.paramToString(value);\n        }\n      }\n    }\n    return newParams;\n  };\n\n  /**\n   * Enumeration of collection format separator strategies.\n   * @enum {String} \n   * @readonly\n   */\n  exports.CollectionFormatEnum = {\n    /**\n     * Comma-separated values. Value: <code>csv</code>\n     * @const\n     */\n    CSV: ',',\n    /**\n     * Space-separated values. Value: <code>ssv</code>\n     * @const\n     */\n    SSV: ' ',\n    /**\n     * Tab-separated values. Value: <code>tsv</code>\n     * @const\n     */\n    TSV: '\\t',\n    /**\n     * Pipe(|)-separated values. Value: <code>pipes</code>\n     * @const\n     */\n    PIPES: '|',\n    /**\n     * Native array. Value: <code>multi</code>\n     * @const\n     */\n    MULTI: 'multi'\n  };\n\n  /**\n   * Builds a string representation of an array-type actual parameter, according to the given collection format.\n   * @param {Array} param An array parameter.\n   * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n   * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n   * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n   */\n  exports.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {\n    if (param == null) {\n      return null;\n    }\n    switch (collectionFormat) {\n      case 'csv':\n        return param.map(this.paramToString).join(',');\n      case 'ssv':\n        return param.map(this.paramToString).join(' ');\n      case 'tsv':\n        return param.map(this.paramToString).join('\\t');\n      case 'pipes':\n        return param.map(this.paramToString).join('|');\n      case 'multi':\n        // return the array directly as SuperAgent will handle it as expected\n        return param.map(this.paramToString);\n      default:\n        throw new Error('Unknown collection format: ' + collectionFormat);\n    }\n  };\n\n  /**\n   * Applies authentication headers to the request.\n   * @param {Object} request The request object created by a <code>superagent()</code> call.\n   * @param {Array.<String>} authNames An array of authentication method names.\n   */\n  exports.prototype.applyAuthToRequest = function(request, authNames) {\n    var _this = this;\n    authNames.forEach(function(authName) {\n      var auth = _this.authentications[authName];\n      switch (auth.type) {\n        case 'basic':\n          if (auth.username || auth.password) {\n            request.auth(auth.username || '', auth.password || '');\n          }\n          break;\n        case 'apiKey':\n          if (auth.apiKey) {\n            var data = {};\n            if (auth.apiKeyPrefix) {\n              data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;\n            } else {\n              data[auth.name] = auth.apiKey;\n            }\n            if (auth['in'] === 'header') {\n              request.set(data);\n            } else {\n              request.query(data);\n            }\n          }\n          break;\n        case 'oauth2':\n          if (auth.accessToken) {\n            request.set({'Authorization': 'Bearer ' + auth.accessToken});\n          }\n          break;\n        default:\n          throw new Error('Unknown authentication type: ' + auth.type);\n      }\n    });\n  };\n\n  /**\n   * Deserializes an HTTP response body into a value of the specified type.\n   * @param {Object} response A SuperAgent response object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns A value of the specified type.\n   */\n  exports.prototype.deserialize = function deserialize(response, returnType) {\n    if (response == null || returnType == null) {\n      return null;\n    }\n    // Rely on SuperAgent for parsing response body.\n    // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n    var data = response.body;\n    if (data == null) {\n      // SuperAgent does not always produce a body; use the unparsed response as a fallback\n      data = response.text;\n    }\n    return exports.convertToType(data, returnType);\n  };\n\n  /**\n   * Callback function to receive the result of the operation.\n   * @callback module:ApiClient~callApiCallback\n   * @param {String} error Error message, if any.\n   * @param data The data returned by the service call.\n   * @param {String} response The complete HTTP response.\n   */\n\n  /**\n   * Invokes the REST service using the supplied settings and parameters.\n   * @param {String} path The base URL to invoke.\n   * @param {String} httpMethod The HTTP method to use.\n   * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n   * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n   * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n   * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n   * @param {Object} bodyParam The value to pass as the request body.\n   * @param {Array.<String>} authNames An array of authentication type names.\n   * @param {Array.<String>} contentTypes An array of request MIME types.\n   * @param {Array.<String>} accepts An array of acceptable response MIME types.\n   * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n   * constructor for a complex type.\n   * @param {module:ApiClient~callApiCallback} callback The callback function.\n   * @returns {Object} The SuperAgent request object.\n   */\n  exports.prototype.callApi = function callApi(path, httpMethod, pathParams,\n      queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n      returnType, callback) {\n\n      //////////////////////////////////////////// Begin of modification /////////////////////////////////////////////////\n      // Modification of generated code by OJ: The vTiger-Endpoints are not compatible to the general way of restfully\n      // addressing a resource: they are services offered by an endpoint which encodes the operation. The operation is\n      // the first query parameter of the endpoint. As swagger doesn't support query parameters as endpoint-components,\n      // the YAML definition created includes the parameter as part of the path.\n      // In order to properly execute the HTTP-methods, we now need to re-create this part of the path as query parameter\n      var effectivePath = path;\n      var effectiveQueryParams = queryParams;\n\n      var posQuestionMark = path.search(\"\\\\?\");\n      if (posQuestionMark !== -1) {\n          var paramKeyValue = effectivePath.substring(posQuestionMark + 1).split(\"=\");\n          effectiveQueryParams[paramKeyValue[0]] = paramKeyValue[1];\n          effectivePath = effectivePath.substring(0, posQuestionMark);\n      }\n\n      var _this = this;\n      var url = this.buildUrl(effectivePath, pathParams);\n      var request = superagent(httpMethod, url);\n\n      // apply authentications\n      this.applyAuthToRequest(request, authNames);\n\n      // set query parameters\n      request.query(this.normalizeParams(effectiveQueryParams));\n\n      ////////////////////////////////////////////// End of modification /////////////////////////////////////////////////\n\n    // set header parameters\n    request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n    // set request timeout\n    request.timeout(this.timeout);\n\n    var contentType = this.jsonPreferredMime(contentTypes);\n    if (contentType) {\n      request.type(contentType);\n    } else if (!request.header['Content-Type']) {\n      request.type('application/json');\n    }\n\n    if (contentType === 'application/x-www-form-urlencoded') {\n      request.send(this.normalizeParams(formParams));\n    } else if (contentType == 'multipart/form-data') {\n      var _formParams = this.normalizeParams(formParams);\n      for (var key in _formParams) {\n        if (_formParams.hasOwnProperty(key)) {\n          if (this.isFileParam(_formParams[key])) {\n            // file field\n            request.attach(key, _formParams[key]);\n          } else {\n            request.field(key, _formParams[key]);\n          }\n        }\n      }\n    } else if (bodyParam) {\n      request.send(bodyParam);\n    }\n\n    var accept = this.jsonPreferredMime(accepts);\n    if (accept) {\n      request.accept(accept);\n    }\n\n\n    request.end(function(error, response) {\n      if (callback) {\n        var data = null;\n        if (!error) {\n          data = _this.deserialize(response, returnType);\n        }\n        callback(error, data, response);\n      }\n    });\n\n    return request;\n  };\n\n  /**\n   * Parses an ISO-8601 string representation of a date value.\n   * @param {String} str The date value as a string.\n   * @returns {Date} The parsed date object.\n   */\n  exports.parseDate = function(str) {\n    return new Date(str.replace(/T/i, ' '));\n  };\n\n  /**\n   * Converts a value to the specified type.\n   * @param {(String|Object)} data The data to convert, as a string or object.\n   * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n   * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n   * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n   * all properties on <code>data<code> will be converted to this type.\n   * @returns An instance of the specified type.\n   */\n  exports.convertToType = function(data, type) {\n    switch (type) {\n      case 'Boolean':\n        return Boolean(data);\n      case 'Integer':\n        return parseInt(data, 10);\n      case 'Number':\n        return parseFloat(data);\n      case 'String':\n        return String(data);\n      case 'Date':\n        return this.parseDate(String(data));\n      default:\n        if (type === Object) {\n          // generic object, return directly\n          return data;\n        } else if (typeof type === 'function') {\n          // for model type like: User\n          return type.constructFromObject(data);\n        } else if (Array.isArray(type)) {\n          // for array type like: ['String']\n          var itemType = type[0];\n          return data.map(function(item) {\n            return exports.convertToType(item, itemType);\n          });\n        } else if (typeof type === 'object') {\n          // for plain object type like: {'String': 'Integer'}\n          var keyType, valueType;\n          for (var k in type) {\n            if (type.hasOwnProperty(k)) {\n              keyType = k;\n              valueType = type[k];\n              break;\n            }\n          }\n          var result = {};\n          for (var k in data) {\n            if (data.hasOwnProperty(k)) {\n              var key = exports.convertToType(k, keyType);\n              var value = exports.convertToType(data[k], valueType);\n              result[key] = value;\n            }\n          }\n          return result;\n        } else {\n          // for unknown type, return the data directly\n          return data;\n        }\n    }\n  };\n\n  /**\n   * Constructs a new map or array model from REST data.\n   * @param data {Object|Array} The REST data.\n   * @param obj {Object|Array} The target object or array.\n   */\n  exports.constructFromObject = function(data, obj, itemType) {\n    if (Array.isArray(data)) {\n      for (var i = 0; i < data.length; i++) {\n        if (data.hasOwnProperty(i))\n          obj[i] = exports.convertToType(data[i], itemType);\n      }\n    } else {\n      for (var k in data) {\n        if (data.hasOwnProperty(k))\n          result[k] = exports.convertToType(data[k], itemType);\n      }\n    }\n  };\n\n  /**\n   * The default API client implementation.\n   * @type {module:ApiClient}\n   */\n  exports.instance = new exports();\n\n  return exports;\n}));\n"]}