{"version":3,"sources":["../../../../src/vtiger_consumer_swagger/src/api/DefaultApi.js"],"names":[],"mappings":";;;;AAAC,WAAU,IAAV,EAAgB,OAAhB,EAAyB;AACtB,QAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAA3C,EAAgD;;AAE5C,eAAO,CAAC,WAAD,EAAc,oBAAd,EAAoC,0BAApC,EAAgE,mBAAhE,CAAP,EAA6F,OAA7F;AACH,KAHD,MAGO,IAAI,QAAO,MAAP,yCAAO,MAAP,OAAkB,QAAlB,IAA8B,OAAO,OAAzC,EAAkD;;AAErD,eAAO,OAAP,GAAiB,QAAQ,QAAQ,cAAR,CAAR,EAAiC,QAAQ,uBAAR,CAAjC,EAAmE,QAAQ,6BAAR,CAAnE,EAA2G,QAAQ,sBAAR,CAA3G,CAAjB;AACH,KAHM,MAGA;;AAEH,YAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,iBAAK,SAAL,GAAiB,EAAjB;AACH;AACD,aAAK,SAAL,CAAe,UAAf,GAA4B,QAAQ,KAAK,SAAL,CAAe,SAAvB,EAAkC,KAAK,SAAL,CAAe,YAAjD,EAA+D,KAAK,SAAL,CAAe,kBAA9E,EAAkG,KAAK,SAAL,CAAe,WAAjH,CAA5B;AACH;AACJ,CAdA,aAcO,UAAU,SAAV,EAAqB,YAArB,EAAmC,kBAAnC,EAAuD,WAAvD,EAAoE;AACxE;;;;;;;;;;;;;;;;AAeA,QAAI,UAAU,SAAV,OAAU,CAAU,SAAV,EAAqB;AAC/B,aAAK,SAAL,GAAiB,aAAa,UAAU,QAAxC;;;;;;;;;;;;;;;;;AAkBA,aAAK,mBAAL,GAA2B,UAAU,WAAV,EAAuB,WAAvB,EAAoC,OAApC,EAA6C,QAA7C,EAAuD;AAC9E,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,eAAe,SAAf,IAA4B,eAAe,IAA/C,EAAqD;AACjD,sBAAM,+EAAN;AACH;;;AAGD,gBAAI,eAAe,SAAf,IAA4B,eAAe,IAA/C,EAAqD;AACjD,sBAAM,+EAAN;AACH;;;AAGD,gBAAI,WAAW,SAAX,IAAwB,WAAW,IAAvC,EAA6C;AACzC,sBAAM,2EAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc,EAAlB;AACA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa;AACb,+BAAe,WADF;AAEb,+BAAe,WAFF;AAGb,2BAAW;AAHE,aAAjB;;AAMA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,YAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,oBADG,EACmB,MADnB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SAtCD;;;;;;;;;;;;;;;;AAsDA,aAAK,mBAAL,GAA2B,UAAU,WAAV,EAAuB,EAAvB,EAA2B,QAA3B,EAAqC;AAC5D,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,eAAe,SAAf,IAA4B,eAAe,IAA/C,EAAqD;AACjD,sBAAM,+EAAN;AACH;;;AAGD,gBAAI,MAAM,SAAN,IAAmB,MAAM,IAA7B,EAAmC;AAC/B,sBAAM,sEAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc,EAAlB;AACA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa;AACb,+BAAe,WADF;AAEb,sBAAM;AAFO,aAAjB;;AAKA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,YAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,oBADG,EACmB,MADnB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SAhCD;;;;;;;;;;;;;;AA8CA,aAAK,oBAAL,GAA4B,UAAU,WAAV,EAAuB,QAAvB,EAAiC;AACzD,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,eAAe,SAAf,IAA4B,eAAe,IAA/C,EAAqD;AACjD,sBAAM,gFAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc;AACd,+BAAe;AADD,aAAlB;AAGA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa,EAAjB;;AAEA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,IAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,sBADG,EACqB,KADrB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SA1BD;;;;;;;;;;;;;;;AAyCA,aAAK,wBAAL,GAAgC,UAAU,QAAV,EAAoB,QAApB,EAA8B;AAC1D,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,YAAY,SAAZ,IAAyB,YAAY,IAAzC,EAA+C;AAC3C,sBAAM,iFAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc;AACd,4BAAY;AADE,aAAlB;AAGA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa,EAAjB;;AAEA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,kBAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,0BADG,EACyB,KADzB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SA1BD;;;;;;;;;;;;;;AAwCA,aAAK,qBAAL,GAA6B,UAAU,WAAV,EAAuB,QAAvB,EAAiC;AAC1D,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,eAAe,SAAf,IAA4B,eAAe,IAA/C,EAAqD;AACjD,sBAAM,iFAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc;AACd,+BAAe;AADD,aAAlB;AAGA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa,EAAjB;;AAEA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,IAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,uBADG,EACsB,KADtB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SA1BD;;;;;;;;;;;;;;;;AA0CA,aAAK,kBAAL,GAA0B,UAAU,QAAV,EAAoB,SAApB,EAA+B,QAA/B,EAAyC;AAC/D,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,YAAY,SAAZ,IAAyB,YAAY,IAAzC,EAA+C;AAC3C,sBAAM,2EAAN;AACH;;;AAGD,gBAAI,aAAa,SAAb,IAA0B,aAAa,IAA3C,EAAiD;AAC7C,sBAAM,4EAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc,EAAlB;AACA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa;AACb,4BAAY,QADC;AAEb,6BAAa;AAFA,aAAjB;;AAKA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,WAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,mBADG,EACkB,MADlB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SAhCD;;;;;;;;;;;;;;;AA+CA,aAAK,iBAAL,GAAyB,UAAU,WAAV,EAAuB,KAAvB,EAA8B,QAA9B,EAAwC;AAC7D,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,eAAe,SAAf,IAA4B,eAAe,IAA/C,EAAqD;AACjD,sBAAM,6EAAN;AACH;;;AAGD,gBAAI,SAAS,SAAT,IAAsB,SAAS,IAAnC,EAAyC;AACrC,sBAAM,uEAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc;AACd,+BAAe,WADD;AAEd,yBAAS;AAFK,aAAlB;AAIA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa,EAAjB;;AAEA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,IAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,mBADG,EACkB,KADlB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SAhCD;;;;;;;;;;;;;;;AA+CA,aAAK,oBAAL,GAA4B,UAAU,WAAV,EAAuB,EAAvB,EAA2B,QAA3B,EAAqC;AAC7D,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,eAAe,SAAf,IAA4B,eAAe,IAA/C,EAAqD;AACjD,sBAAM,gFAAN;AACH;;;AAGD,gBAAI,MAAM,SAAN,IAAmB,MAAM,IAA7B,EAAmC;AAC/B,sBAAM,uEAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc;AACd,+BAAe,WADD;AAEd,sBAAM;AAFQ,aAAlB;AAIA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa,EAAjB;;AAEA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,IAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,sBADG,EACqB,KADrB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SAhCD;;;;;;;;;;;;;;;;AAgDA,aAAK,mBAAL,GAA2B,UAAU,WAAV,EAAuB,OAAvB,EAAgC,QAAhC,EAA0C;AACjE,gBAAI,WAAW,IAAf;;;AAGA,gBAAI,eAAe,SAAf,IAA4B,eAAe,IAA/C,EAAqD;AACjD,sBAAM,+EAAN;AACH;;;AAGD,gBAAI,WAAW,SAAX,IAAwB,WAAW,IAAvC,EAA6C;AACzC,sBAAM,2EAAN;AACH;;AAGD,gBAAI,aAAa,EAAjB;AACA,gBAAI,cAAc,EAAlB;AACA,gBAAI,eAAe,EAAnB;AACA,gBAAI,aAAa;AACb,+BAAe,WADF;AAEb,2BAAW;AAFE,aAAjB;;AAKA,gBAAI,YAAY,EAAhB;AACA,gBAAI,eAAe,CAAC,qBAAD,CAAnB;AACA,gBAAI,UAAU,CAAC,kBAAD,CAAd;AACA,gBAAI,aAAa,YAAjB;;AAEA,mBAAO,KAAK,SAAL,CAAe,OAAf,CACH,oBADG,EACmB,MADnB,EAEH,UAFG,EAES,WAFT,EAEsB,YAFtB,EAEoC,UAFpC,EAEgD,QAFhD,EAGH,SAHG,EAGQ,YAHR,EAGsB,OAHtB,EAG+B,UAH/B,EAG2C,QAH3C,CAAP;AAKH,SAhCD;AAiCH,KAjaD;;AAmaA,WAAO,OAAP;AACH,CAlcA,CAAD","file":"DefaultApi.js","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['ApiClient', 'model/CRUDResponse', 'model/GetChallengeResult', 'model/LoginResult'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // CommonJS-like environments that support module.exports, like Node.\n        module.exports = factory(require('../ApiClient'), require('../model/CRUDResponse'), require('../model/GetChallengeResult'), require('../model/LoginResult'));\n    } else {\n        // Browser globals (root is window)\n        if (!root.VTigerCrm) {\n            root.VTigerCrm = {};\n        }\n        root.VTigerCrm.DefaultApi = factory(root.VTigerCrm.ApiClient, root.VTigerCrm.CRUDResponse, root.VTigerCrm.GetChallengeResult, root.VTigerCrm.LoginResult);\n    }\n}(this, function (ApiClient, CRUDResponse, GetChallengeResult, LoginResult) {\n    'use strict';\n\n    /**\n     * Default service.\n     * @module api/DefaultApi\n     * @version 0.0.1\n     */\n\n    /**\n     * Constructs a new DefaultApi.\n     * @alias module:api/DefaultApi\n     * @class\n     * @param {module:ApiClient} apiClient Optional API client implementation to use,\n     * default to {@link module:ApiClient#instance} if unspecified.\n     */\n    var exports = function (apiClient) {\n        this.apiClient = apiClient || ApiClient.instance;\n\n\n        /**\n         * Callback function to receive the result of the operationcreatePost operation.\n         * @callback module:api/DefaultApi~operationcreatePostCallback\n         * @param {String} error Error message, if any.\n         * @param {module:model/CRUDResponse} data The data returned by the service call.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} sessionName SessionID retrieved in login\n         * @param {module:model/String} elementType The model of the instance to be addressed\n         * @param {String} element An instance of a module (aka \\&quot;elementType\\&quot;) encoded as String\n         * @param {module:api/DefaultApi~operationcreatePostCallback} callback The callback function, accepting three arguments: error, data, response\n         * data is of type: {module:model/CRUDResponse}\n         */\n        this.operationcreatePost = function (sessionName, elementType, element, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'sessionName' is set\n            if (sessionName == undefined || sessionName == null) {\n                throw \"Missing the required parameter 'sessionName' when calling operationcreatePost\";\n            }\n\n            // verify the required parameter 'elementType' is set\n            if (elementType == undefined || elementType == null) {\n                throw \"Missing the required parameter 'elementType' when calling operationcreatePost\";\n            }\n\n            // verify the required parameter 'element' is set\n            if (element == undefined || element == null) {\n                throw \"Missing the required parameter 'element' when calling operationcreatePost\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {};\n            var headerParams = {};\n            var formParams = {\n                'sessionName': sessionName,\n                'elementType': elementType,\n                'element': element\n            };\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = CRUDResponse;\n\n            return this.apiClient.callApi(\n                '/?operation=create', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n\n        /**\n         * Callback function to receive the result of the operationdeletePost operation.\n         * @callback module:api/DefaultApi~operationdeletePostCallback\n         * @param {String} error Error message, if any.\n         * @param {module:model/CRUDResponse} data The data returned by the service call.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} sessionName SessionID retrieved in login\n         * @param {String} id Identifier of the vTiger object instance\n         * @param {module:api/DefaultApi~operationdeletePostCallback} callback The callback function, accepting three arguments: error, data, response\n         * data is of type: {module:model/CRUDResponse}\n         */\n        this.operationdeletePost = function (sessionName, id, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'sessionName' is set\n            if (sessionName == undefined || sessionName == null) {\n                throw \"Missing the required parameter 'sessionName' when calling operationdeletePost\";\n            }\n\n            // verify the required parameter 'id' is set\n            if (id == undefined || id == null) {\n                throw \"Missing the required parameter 'id' when calling operationdeletePost\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {};\n            var headerParams = {};\n            var formParams = {\n                'sessionName': sessionName,\n                'id': id\n            };\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = CRUDResponse;\n\n            return this.apiClient.callApi(\n                '/?operation=delete', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n\n        /**\n         * Callback function to receive the result of the operationdescribeGet operation.\n         * @callback module:api/DefaultApi~operationdescribeGetCallback\n         * @param {String} error Error message, if any.\n         * @param data This operation does not return a value.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} sessionName SessionID retrieved in login\n         * @param {module:api/DefaultApi~operationdescribeGetCallback} callback The callback function, accepting three arguments: error, data, response\n         */\n        this.operationdescribeGet = function (sessionName, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'sessionName' is set\n            if (sessionName == undefined || sessionName == null) {\n                throw \"Missing the required parameter 'sessionName' when calling operationdescribeGet\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {\n                'sessionName': sessionName\n            };\n            var headerParams = {};\n            var formParams = {};\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = null;\n\n            return this.apiClient.callApi(\n                '/?operation=describe', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n\n        /**\n         * Callback function to receive the result of the operationgetchallengeGet operation.\n         * @callback module:api/DefaultApi~operationgetchallengeGetCallback\n         * @param {String} error Error message, if any.\n         * @param {module:model/GetChallengeResult} data The data returned by the service call.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} username username used for the interaction\n         * @param {module:api/DefaultApi~operationgetchallengeGetCallback} callback The callback function, accepting three arguments: error, data, response\n         * data is of type: {module:model/GetChallengeResult}\n         */\n        this.operationgetchallengeGet = function (username, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'username' is set\n            if (username == undefined || username == null) {\n                throw \"Missing the required parameter 'username' when calling operationgetchallengeGet\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {\n                'username': username\n            };\n            var headerParams = {};\n            var formParams = {};\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = GetChallengeResult;\n\n            return this.apiClient.callApi(\n                '/?operation=getchallenge', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n\n        /**\n         * Callback function to receive the result of the operationlisttypesGet operation.\n         * @callback module:api/DefaultApi~operationlisttypesGetCallback\n         * @param {String} error Error message, if any.\n         * @param data This operation does not return a value.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} sessionName SessionID retrieved in login\n         * @param {module:api/DefaultApi~operationlisttypesGetCallback} callback The callback function, accepting three arguments: error, data, response\n         */\n        this.operationlisttypesGet = function (sessionName, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'sessionName' is set\n            if (sessionName == undefined || sessionName == null) {\n                throw \"Missing the required parameter 'sessionName' when calling operationlisttypesGet\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {\n                'sessionName': sessionName\n            };\n            var headerParams = {};\n            var formParams = {};\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = null;\n\n            return this.apiClient.callApi(\n                '/?operation=listtypes', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n\n        /**\n         * Callback function to receive the result of the operationloginPost operation.\n         * @callback module:api/DefaultApi~operationloginPostCallback\n         * @param {String} error Error message, if any.\n         * @param {module:model/LoginResult} data The data returned by the service call.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} username username used for the interaction\n         * @param {String} accessKey MD5 hash of concatenation &lt;challengeToken&gt;.&lt;userAccessKey&gt;\n         * @param {module:api/DefaultApi~operationloginPostCallback} callback The callback function, accepting three arguments: error, data, response\n         * data is of type: {module:model/LoginResult}\n         */\n        this.operationloginPost = function (username, accessKey, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'username' is set\n            if (username == undefined || username == null) {\n                throw \"Missing the required parameter 'username' when calling operationloginPost\";\n            }\n\n            // verify the required parameter 'accessKey' is set\n            if (accessKey == undefined || accessKey == null) {\n                throw \"Missing the required parameter 'accessKey' when calling operationloginPost\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {};\n            var headerParams = {};\n            var formParams = {\n                'username': username,\n                'accessKey': accessKey\n            };\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = LoginResult;\n\n            return this.apiClient.callApi(\n                '/?operation=login', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n\n        /**\n         * Callback function to receive the result of the operationqueryGet operation.\n         * @callback module:api/DefaultApi~operationqueryGetCallback\n         * @param {String} error Error message, if any.\n         * @param data This operation does not return a value.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} sessionName SessionID retrieved in login\n         * @param {String} query Query string \\&quot;select * | &lt;column_list&gt; | &lt;count(*)&gt; from &lt;object&gt; [where &lt;conditionals&gt;] [order by &lt;column_list&gt;] [limit [&lt;m&gt;, ]&lt;n&gt;]\\&quot;\n         * @param {module:api/DefaultApi~operationqueryGetCallback} callback The callback function, accepting three arguments: error, data, response\n         */\n        this.operationqueryGet = function (sessionName, query, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'sessionName' is set\n            if (sessionName == undefined || sessionName == null) {\n                throw \"Missing the required parameter 'sessionName' when calling operationqueryGet\";\n            }\n\n            // verify the required parameter 'query' is set\n            if (query == undefined || query == null) {\n                throw \"Missing the required parameter 'query' when calling operationqueryGet\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {\n                'sessionName': sessionName,\n                'query': query\n            };\n            var headerParams = {};\n            var formParams = {};\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = null;\n\n            return this.apiClient.callApi(\n                '/?operation=query', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n\n        /**\n         * Callback function to receive the result of the operationretrieveGet operation.\n         * @callback module:api/DefaultApi~operationretrieveGetCallback\n         * @param {String} error Error message, if any.\n         * @param data This operation does not return a value.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} sessionName SessionID retrieved in login\n         * @param {String} id Identifier of the vTiger object instance\n         * @param {module:api/DefaultApi~operationretrieveGetCallback} callback The callback function, accepting three arguments: error, data, response\n         */\n        this.operationretrieveGet = function (sessionName, id, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'sessionName' is set\n            if (sessionName == undefined || sessionName == null) {\n                throw \"Missing the required parameter 'sessionName' when calling operationretrieveGet\";\n            }\n\n            // verify the required parameter 'id' is set\n            if (id == undefined || id == null) {\n                throw \"Missing the required parameter 'id' when calling operationretrieveGet\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {\n                'sessionName': sessionName,\n                'id': id\n            };\n            var headerParams = {};\n            var formParams = {};\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = null;\n\n            return this.apiClient.callApi(\n                '/?operation=retrieve', 'GET',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n\n        /**\n         * Callback function to receive the result of the operationupdatePost operation.\n         * @callback module:api/DefaultApi~operationupdatePostCallback\n         * @param {String} error Error message, if any.\n         * @param {module:model/CRUDResponse} data The data returned by the service call.\n         * @param {String} response The complete HTTP response.\n         */\n\n        /**\n         * @param {String} sessionName SessionID retrieved in login\n         * @param {String} element An instance of a module (aka \\&quot;elementType\\&quot;) encoded as String\n         * @param {module:api/DefaultApi~operationupdatePostCallback} callback The callback function, accepting three arguments: error, data, response\n         * data is of type: {module:model/CRUDResponse}\n         */\n        this.operationupdatePost = function (sessionName, element, callback) {\n            var postBody = null;\n\n            // verify the required parameter 'sessionName' is set\n            if (sessionName == undefined || sessionName == null) {\n                throw \"Missing the required parameter 'sessionName' when calling operationupdatePost\";\n            }\n\n            // verify the required parameter 'element' is set\n            if (element == undefined || element == null) {\n                throw \"Missing the required parameter 'element' when calling operationupdatePost\";\n            }\n\n\n            var pathParams = {};\n            var queryParams = {};\n            var headerParams = {};\n            var formParams = {\n                'sessionName': sessionName,\n                'element': element\n            };\n\n            var authNames = [];\n            var contentTypes = ['multipart/form-data'];\n            var accepts = ['application/json'];\n            var returnType = CRUDResponse;\n\n            return this.apiClient.callApi(\n                '/?operation=update', 'POST',\n                pathParams, queryParams, headerParams, formParams, postBody,\n                authNames, contentTypes, accepts, returnType, callback\n            );\n        }\n    };\n\n    return exports;\n}));\n"]}