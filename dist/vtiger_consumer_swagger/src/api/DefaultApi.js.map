{"version":3,"sources":["../../../../src/vtiger_consumer_swagger/src/api/DefaultApi.js"],"names":[],"mappings":"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","file":"DefaultApi.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['ApiClient', 'model/GetChallengeResult', 'model/LoginResult'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS-like environments that support module.exports, like Node.\n    module.exports = factory(require('../ApiClient'), require('../model/GetChallengeResult'), require('../model/LoginResult'));\n  } else {\n    // Browser globals (root is window)\n    if (!root.CompactCrmDbDialog) {\n      root.CompactCrmDbDialog = {};\n    }\n    root.CompactCrmDbDialog.DefaultApi = factory(root.CompactCrmDbDialog.ApiClient, root.CompactCrmDbDialog.GetChallengeResult, root.CompactCrmDbDialog.LoginResult);\n  }\n}(this, function(ApiClient, GetChallengeResult, LoginResult) {\n  'use strict';\n\n  /**\n   * Default service.\n   * @module api/DefaultApi\n   * @version 0.1.1\n   */\n\n  /**\n   * Constructs a new DefaultApi. \n   * @alias module:api/DefaultApi\n   * @class\n   * @param {module:ApiClient} apiClient Optional API client implementation to use,\n   * default to {@link module:ApiClient#instance} if unspecified.\n   */\n  var exports = function(apiClient) {\n    this.apiClient = apiClient || ApiClient.instance;\n\n\n    /**\n     * Callback function to receive the result of the operationcreateContactPost operation.\n     * @callback module:api/DefaultApi~operationcreateContactPostCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} sessionName Session handle retrieved in login\n     * @param {String} cElement An instance of a module (aka \\&quot;elementType\\&quot;) encoded as String\n     * @param {String} message message used for the first contact (might contain a campaign)\n     * @param {module:api/DefaultApi~operationcreateContactPostCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.operationcreateContactPost = function(sessionName, cElement, message, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionName' is set\n      if (sessionName == undefined || sessionName == null) {\n        throw \"Missing the required parameter 'sessionName' when calling operationcreateContactPost\";\n      }\n\n      // verify the required parameter 'cElement' is set\n      if (cElement == undefined || cElement == null) {\n        throw \"Missing the required parameter 'cElement' when calling operationcreateContactPost\";\n      }\n\n      // verify the required parameter 'message' is set\n      if (message == undefined || message == null) {\n        throw \"Missing the required parameter 'message' when calling operationcreateContactPost\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n        'sessionName': sessionName,\n        'cElement': cElement,\n        'message': message\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/?operation=create_contact', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationcreatePost operation.\n     * @callback module:api/DefaultApi~operationcreatePostCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} sessionName Session handle retrieved in login\n     * @param {module:model/String} elementType The model of the instance to be addressed\n     * @param {String} element An instance of a module (aka \\&quot;elementType\\&quot;) encoded as String\n     * @param {module:api/DefaultApi~operationcreatePostCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.operationcreatePost = function(sessionName, elementType, element, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionName' is set\n      if (sessionName == undefined || sessionName == null) {\n        throw \"Missing the required parameter 'sessionName' when calling operationcreatePost\";\n      }\n\n      // verify the required parameter 'elementType' is set\n      if (elementType == undefined || elementType == null) {\n        throw \"Missing the required parameter 'elementType' when calling operationcreatePost\";\n      }\n\n      // verify the required parameter 'element' is set\n      if (element == undefined || element == null) {\n        throw \"Missing the required parameter 'element' when calling operationcreatePost\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n        'sessionName': sessionName,\n        'elementType': elementType,\n        'element': element\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/?operation=create', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationdeletePost operation.\n     * @callback module:api/DefaultApi~operationdeletePostCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} sessionName Session handle retrieved in login\n     * @param {String} id Identifier of the vTiger object instance\n     * @param {module:api/DefaultApi~operationdeletePostCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.operationdeletePost = function(sessionName, id, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionName' is set\n      if (sessionName == undefined || sessionName == null) {\n        throw \"Missing the required parameter 'sessionName' when calling operationdeletePost\";\n      }\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw \"Missing the required parameter 'id' when calling operationdeletePost\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n        'sessionName': sessionName,\n        'id': id\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/?operation=delete', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationdescribeGet operation.\n     * @callback module:api/DefaultApi~operationdescribeGetCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} sessionName Session handle retrieved in login\n     * @param {module:api/DefaultApi~operationdescribeGetCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.operationdescribeGet = function(sessionName, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionName' is set\n      if (sessionName == undefined || sessionName == null) {\n        throw \"Missing the required parameter 'sessionName' when calling operationdescribeGet\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'sessionName': sessionName\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/?operation=describe', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationgetchallengeGet operation.\n     * @callback module:api/DefaultApi~operationgetchallengeGetCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/GetChallengeResult} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} username username used for the interaction\n     * @param {module:api/DefaultApi~operationgetchallengeGetCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/GetChallengeResult}\n     */\n    this.operationgetchallengeGet = function(username, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'username' is set\n      if (username == undefined || username == null) {\n        throw \"Missing the required parameter 'username' when calling operationgetchallengeGet\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'username': username\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = GetChallengeResult;\n\n      return this.apiClient.callApi(\n        '/?operation=getchallenge', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationlisttypesGet operation.\n     * @callback module:api/DefaultApi~operationlisttypesGetCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} sessionName Session handle retrieved in login\n     * @param {module:api/DefaultApi~operationlisttypesGetCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.operationlisttypesGet = function(sessionName, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionName' is set\n      if (sessionName == undefined || sessionName == null) {\n        throw \"Missing the required parameter 'sessionName' when calling operationlisttypesGet\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'sessionName': sessionName\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/?operation=listtypes', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationloginPost operation.\n     * @callback module:api/DefaultApi~operationloginPostCallback\n     * @param {String} error Error message, if any.\n     * @param {module:model/LoginResult} data The data returned by the service call.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} username username used for the interaction\n     * @param {String} accessKey MD5 hash of concatenation &lt;challengeToken&gt;.&lt;userAccessKey&gt;\n     * @param {module:api/DefaultApi~operationloginPostCallback} callback The callback function, accepting three arguments: error, data, response\n     * data is of type: {module:model/LoginResult}\n     */\n    this.operationloginPost = function(username, accessKey, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'username' is set\n      if (username == undefined || username == null) {\n        throw \"Missing the required parameter 'username' when calling operationloginPost\";\n      }\n\n      // verify the required parameter 'accessKey' is set\n      if (accessKey == undefined || accessKey == null) {\n        throw \"Missing the required parameter 'accessKey' when calling operationloginPost\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n        'username': username,\n        'accessKey': accessKey\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = LoginResult;\n\n      return this.apiClient.callApi(\n        '/?operation=login', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationqueryGet operation.\n     * @callback module:api/DefaultApi~operationqueryGetCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} sessionName Session handle retrieved in login\n     * @param {String} query Query string \\&quot;select * | &lt;column_list&gt; | &lt;count(*)&gt; from &lt;object&gt; [where &lt;conditionals&gt;] [order by &lt;column_list&gt;] [limit [&lt;m&gt;, ]&lt;n&gt;]\\&quot;\n     * @param {module:api/DefaultApi~operationqueryGetCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.operationqueryGet = function(sessionName, query, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionName' is set\n      if (sessionName == undefined || sessionName == null) {\n        throw \"Missing the required parameter 'sessionName' when calling operationqueryGet\";\n      }\n\n      // verify the required parameter 'query' is set\n      if (query == undefined || query == null) {\n        throw \"Missing the required parameter 'query' when calling operationqueryGet\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'sessionName': sessionName,\n        'query': query\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/?operation=query', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationretrieveGet operation.\n     * @callback module:api/DefaultApi~operationretrieveGetCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} sessionName Session handle retrieved in login\n     * @param {String} id Identifier of the vTiger object instance\n     * @param {module:api/DefaultApi~operationretrieveGetCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.operationretrieveGet = function(sessionName, id, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionName' is set\n      if (sessionName == undefined || sessionName == null) {\n        throw \"Missing the required parameter 'sessionName' when calling operationretrieveGet\";\n      }\n\n      // verify the required parameter 'id' is set\n      if (id == undefined || id == null) {\n        throw \"Missing the required parameter 'id' when calling operationretrieveGet\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n        'sessionName': sessionName,\n        'id': id\n      };\n      var headerParams = {\n      };\n      var formParams = {\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/?operation=retrieve', 'GET',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n\n    /**\n     * Callback function to receive the result of the operationupdatePost operation.\n     * @callback module:api/DefaultApi~operationupdatePostCallback\n     * @param {String} error Error message, if any.\n     * @param data This operation does not return a value.\n     * @param {String} response The complete HTTP response.\n     */\n\n    /**\n     * @param {String} sessionName Session handle retrieved in login\n     * @param {String} element An instance of a module (aka \\&quot;elementType\\&quot;) encoded as String\n     * @param {module:api/DefaultApi~operationupdatePostCallback} callback The callback function, accepting three arguments: error, data, response\n     */\n    this.operationupdatePost = function(sessionName, element, callback) {\n      var postBody = null;\n\n      // verify the required parameter 'sessionName' is set\n      if (sessionName == undefined || sessionName == null) {\n        throw \"Missing the required parameter 'sessionName' when calling operationupdatePost\";\n      }\n\n      // verify the required parameter 'element' is set\n      if (element == undefined || element == null) {\n        throw \"Missing the required parameter 'element' when calling operationupdatePost\";\n      }\n\n\n      var pathParams = {\n      };\n      var queryParams = {\n      };\n      var headerParams = {\n      };\n      var formParams = {\n        'sessionName': sessionName,\n        'element': element\n      };\n\n      var authNames = [];\n      var contentTypes = ['application/x-www-form-urlencoded'];\n      var accepts = ['application/json'];\n      var returnType = null;\n\n      return this.apiClient.callApi(\n        '/?operation=update', 'POST',\n        pathParams, queryParams, headerParams, formParams, postBody,\n        authNames, contentTypes, accepts, returnType, callback\n      );\n    }\n  };\n\n  return exports;\n}));\n"]}